// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v1.181.2
//   protoc               v5.28.0
// source: main.proto

/* eslint-disable */
import _m0 from "protobufjs/minimal";

export const protobufPackage = "";

export interface UnitStruct {
}

export interface NewtypeStruct {
  value: number;
}

export interface TupleStruct {
  first: number;
  second: number;
  third: string;
}

export interface SimpleStruct {
  a: number;
  b: string;
}

export interface ComplexStruct {
  inner: SimpleStruct | undefined;
  flag: boolean;
  items: MultiEnum[];
  unit: UnitStruct | undefined;
  newtype: number;
  tuple: TupleStruct | undefined;
}

export interface MultiEnum {
  variant?:
    | { $case: "variant_a"; variant_a: VariantA }
    | { $case: "variant_b"; variant_b: VariantB }
    | { $case: "variant_c"; variant_c: VariantC }
    | { $case: "unit_variant"; unit_variant: UnitVariant }
    | undefined;
}

export interface VariantA {
  value: number;
}

export interface VariantB {
  value: string;
}

export interface VariantC {
  x: number;
  y: number;
}

/** Unit variant (empty) */
export interface UnitVariant {
}

function createBaseUnitStruct(): UnitStruct {
  return {};
}

export const UnitStruct = {
  encode(_: UnitStruct, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): UnitStruct {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseUnitStruct();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  create<I extends Exact<DeepPartial<UnitStruct>, I>>(base?: I): UnitStruct {
    return UnitStruct.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<UnitStruct>, I>>(_: I): UnitStruct {
    const message = createBaseUnitStruct();
    return message;
  },
};

function createBaseNewtypeStruct(): NewtypeStruct {
  return { value: 0 };
}

export const NewtypeStruct = {
  encode(message: NewtypeStruct, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.value !== 0) {
      writer.uint32(8).int32(message.value);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): NewtypeStruct {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseNewtypeStruct();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 8) {
            break;
          }

          message.value = reader.int32();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  create<I extends Exact<DeepPartial<NewtypeStruct>, I>>(base?: I): NewtypeStruct {
    return NewtypeStruct.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<NewtypeStruct>, I>>(object: I): NewtypeStruct {
    const message = createBaseNewtypeStruct();
    message.value = object.value ?? 0;
    return message;
  },
};

function createBaseTupleStruct(): TupleStruct {
  return { first: 0, second: 0, third: "" };
}

export const TupleStruct = {
  encode(message: TupleStruct, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.first !== 0) {
      writer.uint32(8).int32(message.first);
    }
    if (message.second !== 0) {
      writer.uint32(17).double(message.second);
    }
    if (message.third !== "") {
      writer.uint32(26).string(message.third);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): TupleStruct {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseTupleStruct();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 8) {
            break;
          }

          message.first = reader.int32();
          continue;
        case 2:
          if (tag !== 17) {
            break;
          }

          message.second = reader.double();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.third = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  create<I extends Exact<DeepPartial<TupleStruct>, I>>(base?: I): TupleStruct {
    return TupleStruct.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<TupleStruct>, I>>(object: I): TupleStruct {
    const message = createBaseTupleStruct();
    message.first = object.first ?? 0;
    message.second = object.second ?? 0;
    message.third = object.third ?? "";
    return message;
  },
};

function createBaseSimpleStruct(): SimpleStruct {
  return { a: 0, b: "" };
}

export const SimpleStruct = {
  encode(message: SimpleStruct, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.a !== 0) {
      writer.uint32(8).int32(message.a);
    }
    if (message.b !== "") {
      writer.uint32(18).string(message.b);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): SimpleStruct {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseSimpleStruct();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 8) {
            break;
          }

          message.a = reader.int32();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.b = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  create<I extends Exact<DeepPartial<SimpleStruct>, I>>(base?: I): SimpleStruct {
    return SimpleStruct.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<SimpleStruct>, I>>(object: I): SimpleStruct {
    const message = createBaseSimpleStruct();
    message.a = object.a ?? 0;
    message.b = object.b ?? "";
    return message;
  },
};

function createBaseComplexStruct(): ComplexStruct {
  return { inner: undefined, flag: false, items: [], unit: undefined, newtype: 0, tuple: undefined };
}

export const ComplexStruct = {
  encode(message: ComplexStruct, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.inner !== undefined) {
      SimpleStruct.encode(message.inner, writer.uint32(10).fork()).ldelim();
    }
    if (message.flag !== false) {
      writer.uint32(16).bool(message.flag);
    }
    for (const v of message.items) {
      MultiEnum.encode(v!, writer.uint32(26).fork()).ldelim();
    }
    if (message.unit !== undefined) {
      UnitStruct.encode(message.unit, writer.uint32(34).fork()).ldelim();
    }
    if (message.newtype !== 0) {
      writer.uint32(40).int32(message.newtype);
    }
    if (message.tuple !== undefined) {
      TupleStruct.encode(message.tuple, writer.uint32(50).fork()).ldelim();
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): ComplexStruct {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseComplexStruct();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.inner = SimpleStruct.decode(reader, reader.uint32());
          continue;
        case 2:
          if (tag !== 16) {
            break;
          }

          message.flag = reader.bool();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.items.push(MultiEnum.decode(reader, reader.uint32()));
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          message.unit = UnitStruct.decode(reader, reader.uint32());
          continue;
        case 5:
          if (tag !== 40) {
            break;
          }

          message.newtype = reader.int32();
          continue;
        case 6:
          if (tag !== 50) {
            break;
          }

          message.tuple = TupleStruct.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  create<I extends Exact<DeepPartial<ComplexStruct>, I>>(base?: I): ComplexStruct {
    return ComplexStruct.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<ComplexStruct>, I>>(object: I): ComplexStruct {
    const message = createBaseComplexStruct();
    message.inner = (object.inner !== undefined && object.inner !== null)
      ? SimpleStruct.fromPartial(object.inner)
      : undefined;
    message.flag = object.flag ?? false;
    message.items = object.items?.map((e) => MultiEnum.fromPartial(e)) || [];
    message.unit = (object.unit !== undefined && object.unit !== null)
      ? UnitStruct.fromPartial(object.unit)
      : undefined;
    message.newtype = object.newtype ?? 0;
    message.tuple = (object.tuple !== undefined && object.tuple !== null)
      ? TupleStruct.fromPartial(object.tuple)
      : undefined;
    return message;
  },
};

function createBaseMultiEnum(): MultiEnum {
  return { variant: undefined };
}

export const MultiEnum = {
  encode(message: MultiEnum, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    switch (message.variant?.$case) {
      case "variant_a":
        VariantA.encode(message.variant.variant_a, writer.uint32(10).fork()).ldelim();
        break;
      case "variant_b":
        VariantB.encode(message.variant.variant_b, writer.uint32(18).fork()).ldelim();
        break;
      case "variant_c":
        VariantC.encode(message.variant.variant_c, writer.uint32(26).fork()).ldelim();
        break;
      case "unit_variant":
        UnitVariant.encode(message.variant.unit_variant, writer.uint32(34).fork()).ldelim();
        break;
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): MultiEnum {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseMultiEnum();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.variant = { $case: "variant_a", variant_a: VariantA.decode(reader, reader.uint32()) };
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.variant = { $case: "variant_b", variant_b: VariantB.decode(reader, reader.uint32()) };
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.variant = { $case: "variant_c", variant_c: VariantC.decode(reader, reader.uint32()) };
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          message.variant = { $case: "unit_variant", unit_variant: UnitVariant.decode(reader, reader.uint32()) };
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  create<I extends Exact<DeepPartial<MultiEnum>, I>>(base?: I): MultiEnum {
    return MultiEnum.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<MultiEnum>, I>>(object: I): MultiEnum {
    const message = createBaseMultiEnum();
    if (
      object.variant?.$case === "variant_a" &&
      object.variant?.variant_a !== undefined &&
      object.variant?.variant_a !== null
    ) {
      message.variant = { $case: "variant_a", variant_a: VariantA.fromPartial(object.variant.variant_a) };
    }
    if (
      object.variant?.$case === "variant_b" &&
      object.variant?.variant_b !== undefined &&
      object.variant?.variant_b !== null
    ) {
      message.variant = { $case: "variant_b", variant_b: VariantB.fromPartial(object.variant.variant_b) };
    }
    if (
      object.variant?.$case === "variant_c" &&
      object.variant?.variant_c !== undefined &&
      object.variant?.variant_c !== null
    ) {
      message.variant = { $case: "variant_c", variant_c: VariantC.fromPartial(object.variant.variant_c) };
    }
    if (
      object.variant?.$case === "unit_variant" &&
      object.variant?.unit_variant !== undefined &&
      object.variant?.unit_variant !== null
    ) {
      message.variant = { $case: "unit_variant", unit_variant: UnitVariant.fromPartial(object.variant.unit_variant) };
    }
    return message;
  },
};

function createBaseVariantA(): VariantA {
  return { value: 0 };
}

export const VariantA = {
  encode(message: VariantA, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.value !== 0) {
      writer.uint32(8).int32(message.value);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): VariantA {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseVariantA();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 8) {
            break;
          }

          message.value = reader.int32();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  create<I extends Exact<DeepPartial<VariantA>, I>>(base?: I): VariantA {
    return VariantA.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<VariantA>, I>>(object: I): VariantA {
    const message = createBaseVariantA();
    message.value = object.value ?? 0;
    return message;
  },
};

function createBaseVariantB(): VariantB {
  return { value: "" };
}

export const VariantB = {
  encode(message: VariantB, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.value !== "") {
      writer.uint32(10).string(message.value);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): VariantB {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseVariantB();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.value = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  create<I extends Exact<DeepPartial<VariantB>, I>>(base?: I): VariantB {
    return VariantB.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<VariantB>, I>>(object: I): VariantB {
    const message = createBaseVariantB();
    message.value = object.value ?? "";
    return message;
  },
};

function createBaseVariantC(): VariantC {
  return { x: 0, y: 0 };
}

export const VariantC = {
  encode(message: VariantC, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.x !== 0) {
      writer.uint32(8).int32(message.x);
    }
    if (message.y !== 0) {
      writer.uint32(17).double(message.y);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): VariantC {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseVariantC();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 8) {
            break;
          }

          message.x = reader.int32();
          continue;
        case 2:
          if (tag !== 17) {
            break;
          }

          message.y = reader.double();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  create<I extends Exact<DeepPartial<VariantC>, I>>(base?: I): VariantC {
    return VariantC.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<VariantC>, I>>(object: I): VariantC {
    const message = createBaseVariantC();
    message.x = object.x ?? 0;
    message.y = object.y ?? 0;
    return message;
  },
};

function createBaseUnitVariant(): UnitVariant {
  return {};
}

export const UnitVariant = {
  encode(_: UnitVariant, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): UnitVariant {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseUnitVariant();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  create<I extends Exact<DeepPartial<UnitVariant>, I>>(base?: I): UnitVariant {
    return UnitVariant.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<UnitVariant>, I>>(_: I): UnitVariant {
    const message = createBaseUnitVariant();
    return message;
  },
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends { $case: string } ? { [K in keyof Omit<T, "$case">]?: DeepPartial<T[K]> } & { $case: T["$case"] }
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & { [K in Exclude<keyof I, KeysOfUnion<P>>]: never };
